from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter, CommandObject
import random
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

last_used = {}

from app import keyboard as kb
from main import cursor, connection

from dotenv import load_dotenv
import os 

load_dotenv("ini.env")

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GameState(StatesGroup):
    waiting_for_bullets = State()
    in_game = State()

class State_admin(StatesGroup):
    admin = State()

# –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ç—Ä–æ–Ω–æ–≤
MULTIPLIERS = {
    1: 1.1,
    2: 1.3,
    3: 1.5,
    4: 1.7,
    5: 1.9,
    6: 2.5,
    7: 2.7,
    8: 2.8
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
user_games = {}

def new_face(id, username):
    username = username or "unknown"
    cursor.execute('SELECT 1 FROM UsersAndPointDatabese WHERE ID = ?', (id,))
    result = cursor.fetchone()
    if not result:
        cursor.execute('INSERT INTO UsersAndPointDatabese (id, username, point, level) VALUES (?, ?, ?, ?)', 
                      (id, username, 0, 0))
        connection.commit()
        
def update_point(new_point, id):
    cursor.execute('SELECT point FROM UsersAndPointDatabese WHERE id = ?', (id,))
    old_point = cursor.fetchone()
    if old_point and old_point[0] is not None:
        cursor.execute('UPDATE UsersAndPointDatabese SET point = ? WHERE id = ?', 
                      (new_point + old_point[0], id))
    else:
        cursor.execute('UPDATE UsersAndPointDatabese SET point = ? WHERE id = ?', 
                      (new_point, id))
    connection.commit()

def chek_admin_password(data, id):
    if data.get("admin") == os.getenv("ADMIN_PASSWORD"):
        cursor.execute('UPDATE UsersAndPointDatabese SET level = ? WHERE id = ?', (-1, id))
        connection.commit()
        return True
    return False

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã')
    id = message.from_user.id
    username = message.from_user.username
    new_face(id, username)
    await message.answer('–¢—ã —Ç–µ–ø–µ—Ä—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)! üòä –ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞–∂–∏–º–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ä–∞–Ω—å—à–µ.')

@router.message(Command('info'))
async def info(message: Message):
    await message.answer('üìù –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n'
                         '/info - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
                         '/point - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å\n'
                         'p2p - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏ üíé\n'
                         '/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n'
                         '/rus_rou - –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞\n'
                         '/list (–∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                         '/edit <–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–Ω–æ–≤—ã–µ –æ—á–∫–∏> <–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å> - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)')

@router.message(Command('point'))
async def get_point(message: Message):
    user_id = message.from_user.id
    cursor.execute('SELECT point, level FROM UsersAndPointDatabese WHERE id = ?', (user_id,))
    my_point = cursor.fetchone()
    
    if my_point:
        await message.answer(f'üíé –í–∞—à–∏ –æ—á–∫–∏: {my_point[0]}\nüéØ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {my_point[1]}')
    else:
        await message.answer('‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@router.message(F.text == 'p2p')
async def farm(message: Message):
    user_id = message.from_user.id
    now = datetime.now()

    if user_id in last_used and now - last_used[user_id] < timedelta(minutes=5):  # –ö—É–ª–¥–∞—É–Ω 5 –º–∏–Ω—É—Ç
        await message.reply("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!")
        return

    last_used[user_id] = now
    new_point = random.randint(1, 20)
    update_point(new_point, user_id)
    await message.reply(f'üéâ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {new_point} –æ—á–∫–æ–≤!')

@router.message(Command('admin'))
async def admin(message: Message, state: FSMContext):
    await state.set_state(State_admin.admin)
    await message.answer('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞')

@router.message(StateFilter(State_admin.admin))
async def admin_two(message: Message, state: FSMContext):
    await state.update_data(admin=message.text)
    data = await state.get_data()
    if not chek_admin_password(data, message.from_user.id):
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π")
    else:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω üéâ")
    await state.clear()

@router.message(F.text == '–î–∞–Ω—è –ª–æ—Ö')
async def farm(message: Message):
    try:
        await message.reply('üòÇ –î–∞, –¥–∞. –Ø –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω!')
    except:
        await message.answer('üòÇ –î–∞, –¥–∞. –Ø –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω!')

@router.message(Command('list'))
async def list(message: Message):
    cursor.execute('SELECT level FROM UsersAndPointDatabese WHERE id = ?', (message.from_user.id,))
    level_player = cursor.fetchone()
    if level_player and level_player[0] == -1:
        cursor.execute('SELECT * FROM UsersAndPointDatabese')
        rows = cursor.fetchall()

        if not rows:
            await message.answer("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
            return

        text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for row in rows:
            text += f"üÜî {row[0]}\nüë§ Username: {row[1]}\n‚≠ê –û—á–∫–∏: {row[2]}\nüéØ –£—Ä–æ–≤–µ–Ω—å: {row[3]}\n\n"

        for part in [text[i:i+4000] for i in range(0, len(text), 4000)]:
            await message.answer(part)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω ‚ùå")

@router.message(Command('rus_rou'))
async def russian_rulet(message: Message, command: Command, state: FSMContext):
    play_id = message.from_user.id
    cursor.execute('SELECT point FROM UsersAndPointDatabese WHERE id = ?', (play_id,))
    point_data = cursor.fetchone()
    point = point_data[0] if point_data else 0
    
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ /rus_rou! –ü—Ä–∏–º–µ—Ä: /rus_rou 100")
        return
        
    try:
        bet = int(command.args)
        if bet <= 0 or bet > point:
            await message.answer(f"üî¢ –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ({point})! üö´")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(bet=bet)
        await message.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {bet} –æ—á–∫–æ–≤\n–°–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –∏–∑ 8 –±—É–¥–µ—Ç –∑–∞—Ä—è–∂–µ–Ω–æ? (1-8)")
        await state.set_state(GameState.waiting_for_bullets)
        
    except ValueError:
        await message.answer("ü§ñ –û—à–∏–±–∫–∞! –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! ‚ùå")

@router.message(GameState.waiting_for_bullets)
async def set_bullets(message: Message, state: FSMContext):
    try:
        bullets = int(message.text)
        if bullets < 1 or bullets > 8:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    bet = data.get('bet', 0)
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    chamber = [0] * 8
    bullet_positions = random.sample(range(8), bullets)
    for pos in bullet_positions:
        chamber[pos] = 1
    
    user_games[message.from_user.id] = {
        'chamber': chamber,
        'current_pos': 0,
        'bullets': bullets,
        'original_multiplier': MULTIPLIERS[bullets],
        'current_multiplier': MULTIPLIERS[bullets],
        'consecutive_shots': 0,
        'total_shots': 0,
        'game_over': False,
        'bet': bet
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", reply_markup=kb.get_game_keyboard())
    await state.set_state(GameState.in_game)

@router.callback_query(GameState.in_game, F.data == "shoot")
async def shoot(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    game = user_games.get(user_id)
    
    if not game or game['game_over']:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    if game['consecutive_shots'] >= 3:
        await callback.answer("–ù–µ–ª—å–∑—è —Å—Ç—Ä–µ–ª—è—Ç—å –±–æ–ª–µ–µ 3 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!")
        return

    if game['chamber'][game['current_pos']] == 1:
        # üí• –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª ‚Äî –º–∏–Ω—É—Å —Å—Ç–∞–≤–∫–∞
        game['game_over'] = True
        update_point(-game['bet'], user_id)

        await callback.message.edit_text(
            f"üí• –ë–ê–ú! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n"
            f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: {game['current_multiplier']:.2f}x\n"
            f"–°—Ç–∞–≤–∫–∞: {game['bet']} –æ—á–∫–æ–≤\n"
            f"–í—Å–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤: {game['total_shots'] + 1}",
            reply_markup=None
        )
        del user_games[user_id]
        await state.clear()
        return

    # –ò–≥—Ä–æ–∫ –≤—ã–∂–∏–ª
    game['current_pos'] = (game['current_pos'] + 1) % 8
    game['consecutive_shots'] += 1
    game['total_shots'] += 1

    # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –≤—ã—Å—Ç—Ä–µ–ª–æ–≤
    if game['consecutive_shots'] >= 2:
        bonus = 0.5 * game['original_multiplier'] if game['consecutive_shots'] == 2 else 0.05 * game['original_multiplier']
        game['current_multiplier'] += bonus

    await update_game_message(callback.message, game)

@router.callback_query(GameState.in_game, F.data == "spin")
async def spin(callback: CallbackQuery):
    user_id = callback.from_user.id
    game = user_games.get(user_id)
    
    if not game or game['game_over']:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return
    
    # –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    game['current_pos'] = random.randint(0, 7)
    game['consecutive_shots'] = 0
    
    await update_game_message(callback.message, game)

@router.callback_query(GameState.in_game, F.data == "stop")
async def stop_game(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    game = user_games.get(user_id)

    if not game or game['game_over']:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # üí∞ –í—ã—á–∏—Å–ª—è–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    win_amount = int(game['bet'] * game['current_multiplier'])
    update_point(win_amount, user_id)

    game['game_over'] = True

    await callback.message.edit_text(
        f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é.\n"
        f"üí∞ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {win_amount} –æ—á–∫–æ–≤!\n"
        f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: {game['current_multiplier']:.2f}x\n"
        f"–°—Ç–∞–≤–∫–∞: {game['bet']} –æ—á–∫–æ–≤\n"
        f"–í—Å–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤: {game['total_shots']}",
        reply_markup=None
    )

    del user_games[user_id]
    await state.clear()

async def update_game_message(message: Message, game):
    bullets_left = sum(game['chamber'])
    text = (
        f"üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞\n"
        f"–ü–∞—Ç—Ä–æ–Ω–æ–≤ –≤ –±–∞—Ä–∞–±–∞–Ω–µ: {bullets_left}/8\n"
        f"–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {game['current_multiplier']:.2f}x\n"
        f"–°—Ç–∞–≤–∫–∞: {game['bet']} –æ—á–∫–æ–≤\n"
        f"–í—ã—Å—Ç—Ä–µ–ª–æ–≤ –ø–æ–¥—Ä—è–¥: {game['consecutive_shots']}/3\n"
        f"–í—Å–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤: {game['total_shots']}"
    )
    
    await message.edit_text(text, reply_markup=kb.get_game_keyboard())
    
@router.message(Command("edit"))
async def handle_edit_command(message: Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Ä–æ–≤–µ–Ω—å -1)
    try:
        cursor.execute('SELECT level FROM UsersAndPointDatabese WHERE id = ?', (message.from_user.id,))
        user_level = cursor.fetchone()
        if not user_level or user_level[0] != -1:
            await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã (level=-1) –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
            return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if not command.args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /edit <ID> <–Ω–æ–≤—ã–π point> <–Ω–æ–≤—ã–π level>")
        return

    args = command.args.split()
    if len(args) != 3:
        await message.answer("‚ùå –ù—É–∂–Ω–æ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: /edit <ID> <point> <level>")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —á–∏—Å–ª–∞
    try:
        user_id = int(args[0])
        new_point = int(args[1])
        new_level = int(args[2])
    except ValueError:
        await message.answer("‚ùå –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor.execute(
            'UPDATE UsersAndPointDatabese SET point = ?, level = ? WHERE id = ?',
            (new_point, new_level, user_id)
        )
        connection.commit()
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")